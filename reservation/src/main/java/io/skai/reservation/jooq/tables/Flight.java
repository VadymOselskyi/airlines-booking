/*
 * This file is generated by jOOQ.
 */
package io.skai.reservation.jooq.tables;


import io.skai.reservation.jooq.AirlinesDb;
import io.skai.reservation.jooq.Keys;
import io.skai.reservation.jooq.tables.records.FlightRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Flight extends TableImpl<FlightRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>airlines-db.flight</code>
     */
    public static final Flight FLIGHT = new Flight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlightRecord> getRecordType() {
        return FlightRecord.class;
    }

    /**
     * The column <code>airlines-db.flight.id</code>.
     */
    public final TableField<FlightRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>airlines-db.flight.departure_date</code>.
     */
    public final TableField<FlightRecord, LocalDateTime> DEPARTURE_DATE = createField(DSL.name("departure_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>airlines-db.flight.departure_airport_id</code>.
     */
    public final TableField<FlightRecord, Long> DEPARTURE_AIRPORT_ID = createField(DSL.name("departure_airport_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>airlines-db.flight.arrival_date</code>.
     */
    public final TableField<FlightRecord, LocalDateTime> ARRIVAL_DATE = createField(DSL.name("arrival_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>airlines-db.flight.arrival_airport_id</code>.
     */
    public final TableField<FlightRecord, Long> ARRIVAL_AIRPORT_ID = createField(DSL.name("arrival_airport_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Flight(Name alias, Table<FlightRecord> aliased) {
        this(alias, aliased, null);
    }

    private Flight(Name alias, Table<FlightRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>airlines-db.flight</code> table reference
     */
    public Flight(String alias) {
        this(DSL.name(alias), FLIGHT);
    }

    /**
     * Create an aliased <code>airlines-db.flight</code> table reference
     */
    public Flight(Name alias) {
        this(alias, FLIGHT);
    }

    /**
     * Create a <code>airlines-db.flight</code> table reference
     */
    public Flight() {
        this(DSL.name("flight"), null);
    }

    public <O extends Record> Flight(Table<O> child, ForeignKey<O, FlightRecord> key) {
        super(child, key, FLIGHT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AirlinesDb.AIRLINES_DB;
    }

    @Override
    public Identity<FlightRecord, Long> getIdentity() {
        return (Identity<FlightRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FlightRecord> getPrimaryKey() {
        return Keys.KEY_FLIGHT_PRIMARY;
    }

    @Override
    public Flight as(String alias) {
        return new Flight(DSL.name(alias), this);
    }

    @Override
    public Flight as(Name alias) {
        return new Flight(alias, this);
    }

    @Override
    public Flight as(Table<?> alias) {
        return new Flight(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Flight rename(String name) {
        return new Flight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flight rename(Name name) {
        return new Flight(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Flight rename(Table<?> name) {
        return new Flight(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, Long, LocalDateTime, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
