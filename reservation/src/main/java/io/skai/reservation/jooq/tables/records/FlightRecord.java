/*
 * This file is generated by jOOQ.
 */
package io.skai.reservation.jooq.tables.records;


import io.skai.reservation.jooq.tables.Flight;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlightRecord extends UpdatableRecordImpl<FlightRecord> implements Record5<Long, LocalDateTime, Long, LocalDateTime, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>airlines-db.flight.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>airlines-db.flight.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>airlines-db.flight.departure_date</code>.
     */
    public void setDepartureDate(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>airlines-db.flight.departure_date</code>.
     */
    public LocalDateTime getDepartureDate() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>airlines-db.flight.departure_airport_id</code>.
     */
    public void setDepartureAirportId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>airlines-db.flight.departure_airport_id</code>.
     */
    public Long getDepartureAirportId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>airlines-db.flight.arrival_date</code>.
     */
    public void setArrivalDate(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>airlines-db.flight.arrival_date</code>.
     */
    public LocalDateTime getArrivalDate() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>airlines-db.flight.arrival_airport_id</code>.
     */
    public void setArrivalAirportId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>airlines-db.flight.arrival_airport_id</code>.
     */
    public Long getArrivalAirportId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, Long, LocalDateTime, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, LocalDateTime, Long, LocalDateTime, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Flight.FLIGHT.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Flight.FLIGHT.DEPARTURE_DATE;
    }

    @Override
    public Field<Long> field3() {
        return Flight.FLIGHT.DEPARTURE_AIRPORT_ID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Flight.FLIGHT.ARRIVAL_DATE;
    }

    @Override
    public Field<Long> field5() {
        return Flight.FLIGHT.ARRIVAL_AIRPORT_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getDepartureDate();
    }

    @Override
    public Long component3() {
        return getDepartureAirportId();
    }

    @Override
    public LocalDateTime component4() {
        return getArrivalDate();
    }

    @Override
    public Long component5() {
        return getArrivalAirportId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getDepartureDate();
    }

    @Override
    public Long value3() {
        return getDepartureAirportId();
    }

    @Override
    public LocalDateTime value4() {
        return getArrivalDate();
    }

    @Override
    public Long value5() {
        return getArrivalAirportId();
    }

    @Override
    public FlightRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FlightRecord value2(LocalDateTime value) {
        setDepartureDate(value);
        return this;
    }

    @Override
    public FlightRecord value3(Long value) {
        setDepartureAirportId(value);
        return this;
    }

    @Override
    public FlightRecord value4(LocalDateTime value) {
        setArrivalDate(value);
        return this;
    }

    @Override
    public FlightRecord value5(Long value) {
        setArrivalAirportId(value);
        return this;
    }

    @Override
    public FlightRecord values(Long value1, LocalDateTime value2, Long value3, LocalDateTime value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FlightRecord
     */
    public FlightRecord() {
        super(Flight.FLIGHT);
    }

    /**
     * Create a detached, initialised FlightRecord
     */
    public FlightRecord(Long id, LocalDateTime departureDate, Long departureAirportId, LocalDateTime arrivalDate, Long arrivalAirportId) {
        super(Flight.FLIGHT);

        setId(id);
        setDepartureDate(departureDate);
        setDepartureAirportId(departureAirportId);
        setArrivalDate(arrivalDate);
        setArrivalAirportId(arrivalAirportId);
    }

    /**
     * Create a detached, initialised FlightRecord
     */
    public FlightRecord(io.skai.reservation.jooq.tables.pojos.Flight value) {
        super(Flight.FLIGHT);

        if (value != null) {
            setId(value.getId());
            setDepartureDate(value.getDepartureDate());
            setDepartureAirportId(value.getDepartureAirportId());
            setArrivalDate(value.getArrivalDate());
            setArrivalAirportId(value.getArrivalAirportId());
        }
    }
}
