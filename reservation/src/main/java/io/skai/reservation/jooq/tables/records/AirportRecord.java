/*
 * This file is generated by jOOQ.
 */
package io.skai.reservation.jooq.tables.records;


import io.skai.reservation.jooq.tables.Airport;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AirportRecord extends UpdatableRecordImpl<AirportRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>airlines-db.airport.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>airlines-db.airport.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>airlines-db.airport.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>airlines-db.airport.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>airlines-db.airport.country_code</code>.
     */
    public void setCountryCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>airlines-db.airport.country_code</code>.
     */
    public String getCountryCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>airlines-db.airport.city</code>.
     */
    public void setCity(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>airlines-db.airport.city</code>.
     */
    public String getCity() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Airport.AIRPORT.ID;
    }

    @Override
    public Field<String> field2() {
        return Airport.AIRPORT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Airport.AIRPORT.COUNTRY_CODE;
    }

    @Override
    public Field<String> field4() {
        return Airport.AIRPORT.CITY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCountryCode();
    }

    @Override
    public String component4() {
        return getCity();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCountryCode();
    }

    @Override
    public String value4() {
        return getCity();
    }

    @Override
    public AirportRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AirportRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AirportRecord value3(String value) {
        setCountryCode(value);
        return this;
    }

    @Override
    public AirportRecord value4(String value) {
        setCity(value);
        return this;
    }

    @Override
    public AirportRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AirportRecord
     */
    public AirportRecord() {
        super(Airport.AIRPORT);
    }

    /**
     * Create a detached, initialised AirportRecord
     */
    public AirportRecord(Long id, String name, String countryCode, String city) {
        super(Airport.AIRPORT);

        setId(id);
        setName(name);
        setCountryCode(countryCode);
        setCity(city);
    }

    /**
     * Create a detached, initialised AirportRecord
     */
    public AirportRecord(io.skai.reservation.jooq.tables.pojos.Airport value) {
        super(Airport.AIRPORT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setCountryCode(value.getCountryCode());
            setCity(value.getCity());
        }
    }
}
